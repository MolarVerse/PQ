#!/usr/bin/perl
#
#  Interface between PQ and DFTB+

use strict;

# script's name
my $progname = $0;
$progname =~ s{^.*/}{};

# input data from the PQ program
my $charge            = $ARGV[0];   # charge of the qm region
my $readChargesBin    = $ARGV[1];   # flag if initial charges should be read from charges.bin
my $guess_mo          = $ARGV[2];   # flag if a dft step is performed as a guess
my $pointcharges      = $ARGV[3];   # flag if point charges are used
my $dftb_template     = $ARGV[4];   # dftb setup file that generates $dftb_input
my $pointcharges_file = $ARGV[5];   # name of the pointcharges_file

# various variables
my @line;                    # helper variable
my $flag = undef;            # helper variable
my $start_flag       = "";   # helper variable
my $stop_flag        = "";   # helper variable
my $energy;                  # QM energy
my $control_contents = "";   # helper variable - control file modifications
my $gaussian_out     = "";   # output of define, dscf, and grad
my $converged_string = 'convergence criteria satisfied after\s*\d+' .
  '\s+iterations';		         # energy search string

# files and commands
my $dftb_exe      = "dftb+";           # executable
my $dftb_chrg     = "charges.bin";     # result file: converged charges of all qm atoms
my $dftb_input    = "dftb_in.hsd";     # dftb input file
my $dftb_out      = "dftb.out";        # dftb output file
my $dftb_out_prev = "dftb.out.prev";   # summary file - previous step

my $qm_forces              = "qm_forces";           # result file: energy plus forces of all qm atoms
my $qm_charges             = "qm_charges";          # result file: partial charges of all qm atoms
my $pc_forces              = "pc_forces";           # result file: forces of all point charges
my $stress_tensor_file     = "stress_tensor";       # result file: stress tensor

my $qm_coords      = "coords";        # coordinates
my $qm_coords_prev = "coords.prev";   # coordinates previous step

my $energy_found        = 0;   # energy control flag
my $forces_found        = 0;   # forces control flag
my $charges_found       = 0;   # charges control flag
my $pc_forces_found     = 0;   # pointcharge forces control flag
my $stress_tensor_found = 0;   # stress-tensor control flag
my $periodic            = 0;   # periodic system control flag

my $n_pc     = 0;   # number of point charges read from the $pointcharges_file
my $n_fields = 0;

`cat coords > geom.gen`;

# check if the system is periodic by reading the first line of geom.gen
# and read elements from the second line
open (GEOM_FILE, "< geom.gen") or
  die "\n\n\t (-) $progname: Error opening file geom.gen\n";

my $first_line = <GEOM_FILE>;
my $second_line = <GEOM_FILE>;
close (GEOM_FILE);

if (defined $first_line) 
{
  chomp $first_line;
  my @geom_fields = split /\s+/, $first_line;
  
  if (defined $geom_fields[1] && $geom_fields[1] eq 'S') 
  {
    $periodic = 1;
  }
}

# Parse elements from second line
my %elements_present = ();
if (defined $second_line)
{
  chomp $second_line;
  my @element_list = split /\s+/, $second_line;
  foreach my $element (@element_list)
  {
    $elements_present{$element} = 1 if $element ne '';
  }
}

# count number of pointcharges in $pointcharges_file
if ($pointcharges == 1)
{
  open (PC_FILE, "< $pointcharges_file") or
        die "\n\n\t (-) $progname: Error opening file $pointcharges_file'\n";

  while (<PC_FILE>) { $n_pc ++; }

  close (PC_FILE);
}

if ($readChargesBin == 0)
{
  # remove charges.bin 
  unlink $dftb_chrg;
}

# create dftb_in.hsd from dftb_in.template and insert QM charge and GUESS FLAG
open (DFTB_TEMPLATE, "< $dftb_template") or
  die "\n\n\t (-) $progname: Error opening file $dftb_template'\n";

open (DFTB_IN, "> $dftb_input") or
  die "\n\n\t (-) $progname: Error opening file $dftb_input\n";

my $guess_value = $readChargesBin == 1 ? "Yes" : "No";
my $in_hubbard_block = 0;
my $in_max_angular_block = 0;
my $brace_count = 0;

while (<DFTB_TEMPLATE>)
{
  # Track if we're in HubbardDerivs or MaxAngularMomentum blocks
  if (/^\s*HubbardDerivs\s*\{/)
  {
    $in_hubbard_block = 1;
    $brace_count = 1;
  }
  elsif (/^\s*MaxAngularMomentum\s*\{/)
  {
    $in_max_angular_block = 1;
    $brace_count = 1;
  }
  elsif ($in_hubbard_block || $in_max_angular_block)
  {
    # Count braces to track block nesting
    $brace_count += tr/{/{/;
    $brace_count -= tr/}/}/;
    
    # Reset flags when we exit the block (brace_count reaches 0)
    if ($brace_count <= 0)
    {
      $in_hubbard_block = 0;
      $in_max_angular_block = 0;
    }
  }
  
  # Process the line
  my $line = $_;
  
  # Comment out element lines in HubbardDerivs and MaxAngularMomentum blocks
  # if the element is not present in the system
  if (($in_hubbard_block || $in_max_angular_block) && $brace_count > 0)
  {
    # Check if this line defines an element (format: "Element = value")
    if ($line =~ /^\s*([A-Z][a-z]?)\s*=/)
    {
      my $element = $1;
      if (!exists $elements_present{$element})
      {
        # Comment out this line by adding # at the beginning
        $line =~ s/^(\s*)/\1# /;
      }
    }
  }
  
  # Perform standard substitutions
  $line =~ s{__GUESS__}{ReadInitialCharges = $guess_value};
  $line =~ s{__CHARGE__}{$charge};
  $line =~ s{__N_PC__}{$n_pc};
  
  print DFTB_IN $line;
}

close (DFTB_TEMPLATE);
close (DFTB_IN);  

# execute dftb+
if (system("dftb+ > run.out"))
{
  die "\n\n\t (-) $progname: Error executing dftb+.\n";
}

if (system("mv detailed.out $dftb_out"))
{
  die "\n\n\t (-) $progname: Error moving detailed.out to $dftb_out.\n";
}

# create the files to which the results are written
open (DFTB_OUT, "< $dftb_out") or
  die "\n\n\t (-) $progname: Error opening file '$dftb_out'\n";

open (FORCES, "> $qm_forces") or
  die "\n\n\t (-) $progname: Error opening file '$qm_forces'\n";

open (CHARGES, "> $qm_charges") or
  die "\n\n\t (-) $progname: Error opening file '$qm_charges'\n";

if ($pointcharges == 1)
{
  open (PC_FORCES, "> $pc_forces") or
    die "\n\n\t (-) $progname: Error opening file '$pc_forces'\n";
}

if ($periodic == 1)
{
  open (STRESS_TENSOR, "> $stress_tensor_file") or
    die "\n\n\t (-) $progname: Error opening file '$stress_tensor_file'\n";
}

while (<DFTB_OUT>) 
{
  # extract energy
  if (/^\s*Total energy:\s+(.*?)\s+H\s+.*?/)
  {
    printf FORCES ("%20.9f\n", $1);
    $energy_found = 1;
  }

  # extract forces if no pointcharges are used
  if ($pointcharges == 0)
  {
    if (/^\s*Total Forces/ .. /^\s*Maximal derivative component:/)
    {
      if (/^\s+-*\d/)
      {
        @line = split;
        $n_fields = scalar( @line  ) - 3;

        printf FORCES ("%27.18e  %27.18e  %27.18e\n", -$line[0+$n_fields],  -$line[1+$n_fields], -$line[2+$n_fields]);
        $forces_found = 1;
      }
    }
  }

  # extract charges  
  if ( (/^\s*Atom       Net charge/  .. /^\s*COMPONENT/ ) || (/^\s*Atomic gross charges/ .. /^\s*COMPONENT/) )
  {
    if (/^\s+\d+\s+/) 
    {
      @line = split;
      printf CHARGES ("%s  %20.8f\n",$line[0], $line[1]);
      $charges_found = 1;
    }
  }

  # extract pointcharge forces
  if (/^\s*Forces on external charges/ .. /^\s*Volume:/ )
  {
    if (/^\s+-*\d/)  
    {
      @line = split;
      printf PC_FORCES ("%27.18e  %27.18e  %27.18e\n", -$line[0],  -$line[1],  -$line[2]);
      $pc_forces_found = 1;
    }
  }
  
  # extract stress tensor
  if (/^\s*Total stress tensor/ .. /^\s*Total lattice derivs/ )
  {
    if (/^\s+-*\d/)  
    {
      @line = split;
	    printf STRESS_TENSOR ("%27.18e  %27.18e  %27.18e\n", $line[0],  $line[1],  $line[2]);
	    $stress_tensor_found = 1;
    }
  }
}

close (DFTB_OUT);
close (FORCES);
close (CHARGES);
close (PC_FORCES);
close (STRESS_TENSOR);

# create the "log-file" for the last run
`mv $dftb_out  $dftb_out_prev`;
`mv $qm_coords $qm_coords_prev`;

# calculate the forces via a separate dftb+ execution
# if pointcharges have been used
if ($pointcharges == 1)
{
  # open dftb_in.hsd and modify it for force calculation
  my @file_contents;
  if (-e $dftb_input) {  # Check if file exists
      open (DFTB_IN_READ, "< $dftb_input") or
          die "\n\n\t (-) $progname: Error reading file $dftb_input\n";
      @file_contents = <DFTB_IN_READ>;
      close (DFTB_IN_READ);
  }

  # Modify the contents as needed - handle multiline patterns
  my $file_content = join('', @file_contents);

  # Replace Single Point Driver = {} for Geometry Optimization Driver
  $file_content =~ s/Driver\s*=\s*\{\s*\}/Driver = {\n    MaxSteps = 0\n    Optimizer = SteepestDescent{}\n}/gs;

  # Set MaxSccIterations = 1
  if ($file_content =~ /MaxSccIterations\s*=\s*\d+/) {
      # If MaxSccIterations exists, replace it with 1
      $file_content =~ s/MaxSccIterations\s*=\s*\d+/MaxSccIterations = 1/gs;
  } else {
      # If MaxSccIterations doesn't exist, add it inside Hamiltonian block
      $file_content =~ s/(Hamiltonian\s*=\s*\{[^}]*?)(\})/\1    MaxSccIterations = 1\n\2/gs;
  }

  # Set ConvergentSccOnly = No
  if ($file_content =~ /ConvergentSccOnly\s*=\s*\w+/) {
      # If ConvergentSccOnly exists, replace it with No
      $file_content =~ s/ConvergentSccOnly\s*=\s*\w+/ConvergentSccOnly = No/gs;
  } else {
      # If ConvergentSccOnly doesn't exist, add it inside Hamiltonian block
      $file_content =~ s/(Hamiltonian\s*=\s*\{[^}]*?)(\})/\1    ConvergentSccOnly = No\n\2/gs;
  }

  # Set ReadInitialCharges = Yes
  if ($file_content =~ /ReadInitialCharges\s*=\s*\w+/) {
      # If ReadInitialCharges exists, replace it with Yes
      $file_content =~ s/ReadInitialCharges\s*=\s*\w+/ReadInitialCharges = Yes/gs;
  } else {
      # If ReadInitialCharges doesn't exist, add it inside Hamiltonian block
      $file_content =~ s/(Hamiltonian\s*=\s*\{[^}]*?)(\})/\1    ReadInitialCharges = Yes\n\2/gs;
  }

  # Remove entire ElectricField block (including the ElectricField keyword and all content within braces)
  while ($file_content =~ s/(\s*)ElectricField\s*=\s*\{([^{}]*(?:\{[^{}]*\}[^{}]*)*)\}\s*/$1/gs) {
      # Keep looping until no more nested ElectricField blocks are found
  }

  # Add mixer block inside Hamiltonian block
  $file_content =~ s/(Hamiltonian\s*=\s*\{[^}]*?)(\})/\1    mixer = simple{\n        mixingparameter = 0.0000000001\n    }\n\2/gs;

  # Handle Analysis block with PrintForces = Yes
  if ($file_content =~ /Analysis\s*=\s*\{/) {
      # Analysis block exists, add PrintForces inside it (if not already there)
      if ($file_content !~ /PrintForces\s*=\s*\w+/) {
          $file_content =~ s/(Analysis\s*=\s*\{[^}]*?)(\})/\1    PrintForces = Yes\n\2/gs;
      }
  } else {
      # Analysis block doesn't exist, create it with PrintForces
      $file_content .= "\nAnalysis = {\n    PrintForces = Yes\n}\n";
  }

  # Split back into lines
  @file_contents = split(/(?<=\n)/, $file_content);

  # Write the modified contents back
  open (DFTB_IN, "> $dftb_input") or
      die "\n\n\t (-) $progname: Error opening file $dftb_input\n";
  print DFTB_IN @file_contents;
  close (DFTB_IN); 

  # execute dftb+
  if (system("dftb+ > run.out"))
  {
    die "\n\n\t (-) $progname: Error executing dftb+.\n";
  }

  if (system("mv detailed.out $dftb_out"))
  {
    die "\n\n\t (-) $progname: Error moving detailed.out to $dftb_out.\n";
  }

  # create the files to which the results are written
  open (DFTB_OUT, "< $dftb_out") or
    die "\n\n\t (-) $progname: Error opening file '$dftb_out'\n";

  open (FORCES, "> $qm_forces") or
    die "\n\n\t (-) $progname: Error opening file '$qm_forces'\n";

  while (<DFTB_OUT>) 
  {
    if (/^\s*Total Forces/ .. /^\s*Maximal derivative component:/)
    {
      if (/^\s+-*\d/)
      {
        @line = split;
        $n_fields = scalar( @line  ) - 3;

        printf FORCES ("%27.18e  %27.18e  %27.18e\n", -$line[0+$n_fields],  -$line[1+$n_fields], -$line[2+$n_fields]);
        $forces_found = 1;
      }
    }
  }

  close (DFTB_OUT);
  close (FORCES);

  # create the "log-file" for the last run
  `mv $dftb_out  $dftb_out_prev`;
}

if ($energy_found != 1)
{
  printf("\n\n\t (-) $progname: Error encountered while reading $dftb_out.");
  printf("\n\t     QM energy has not been read!");
}

if ($forces_found != 1)
{
  printf("\n\n\t (-) $progname: Error encountered while reading $dftb_out$.");
  printf("\n\t     QM forces have not been read!");
}
     
if ($charges_found != 1)
{
  printf("\n\n\t (-) $progname: Error encountered while reading $dftb_out.");
  printf("\n\t     QM charges have not been read!");
}

if ($pointcharges == 1 && $pc_forces_found != 1)
{
  printf("\n\n\t (-) $progname: Error encountered while reading $dftb_out.");
  printf("\n\t     PC forces have not been read!");
}

if ($periodic == 1 && $stress_tensor_found != 1)
{
  printf("\n\n\t (-) $progname: Error encountered while reading $dftb_out.");
  printf("\n\t     Stress tensor has not been read!");
}

exit 0;

